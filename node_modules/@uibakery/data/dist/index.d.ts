/**
 * UIBakery Data Package
 *
 * This package provides data hooks and utilities for UIBakery applications.
 */
/**
 * Hook for accessing data in UIBakery applications.
 *
 * This hook allows components to access shared data properties by their name.
 * It can be used to retrieve values from the application's data store.
 *
 * @template T - The type of the data to be returned
 * @param {string} prop - The name of the property to access
 * @param {T} [propDefault] - Optional default value to return if the property doesn't exist
 * @returns {T} The value of the requested property or the default value if not found
 *
 * @example
 * // Get a string value with a default
 * const username = useData<string>('user.name', 'Guest');
 *
 * // Get a complex object
 * const userSettings = useData('settings');
 */
export declare function useData<T = any>(prop: string, propDefault?: T): T;
/**
 * Hook for loading data through actions in UIBakery applications.
 *
 * This hook executes a named action to load a list of records and provides loading state management.
 * It automatically handles loading states, errors, and provides a way to reload the data.
 *
 * @template T - The type of a single record returned by the action
 * @template P - The type of parameters to be passed to the action
 * @param {ActionFactory | string} actionName - The name or factory of the action to execute
 * @param {T} [defaultValue] - Optional default value for each item before data is loaded; the returned data will default to an empty array if omitted
 * @param {P} [params] - Optional parameters to pass to the action
 * @returns {[T[], boolean, Error | null, () => Promise<void>]} A tuple containing:
 *   - An array of loaded records, or an empty/default array
 *   - A boolean indicating whether the action is currently loading
 *   - An Error object if the action failed, or null if successful/loading
 *   - A function to manually trigger the action again (reload)
 *
 * @example
 * // Load a list of users
 * const [users, isLoading, error, reload] = useLoadAction<User>(getUsersAction, [], {});
 *
 * @example
 * // Load a single user wrapped in an array, and extract the first record
 * const [result, isLoading] = useLoadAction<User>(getUserByIdAction, [], { id: 1 });
 * const user = result[0] ?? null;
 */
export declare function useLoadAction<T = any, P = any>(actionName: ActionFactory | string, defaultValue?: T[], params?: P): [T[], boolean, Error | null, () => Promise<void>];
/**
 * Hook for performing data mutations in UIBakery applications.
 *
 * This hook provides a function to execute a named mutation action and tracks its loading and error states.
 * It's typically used for create, update, or delete operations that modify data.
 *
 * @template P - The type of parameters to be passed to the mutation action
 * @param {string} actionName - The name of the mutation action to execute
 * @returns {[(params?: P) => Promise<unknown>, boolean, Error | null]} A tuple containing:
 *   - A function that executes the mutation when called with optional parameters
 *   - A boolean indicating if the mutation is currently in progress
 *   - An Error object if the mutation failed, or null if successful/in progress
 *
 * @example
 * // Create a mutation hook for updating a user
 * const [updateUser, isUpdating, updateError] = useMutateAction('updateUser');
 *
 * // Use the mutation function with parameters
 * const handleSubmit = async () => {
 *   try {
 *     await updateUser({ id: 123, name: 'New Name' });
 *     // Handle success
 *   } catch (error) {
 *     // Handle error
 *   }
 * };
 */
export declare function useMutateAction<P = any>(actionName: ActionFactory | string): [(params?: P) => Promise<unknown>, boolean, Error | null];
/**
 * Triggers an event in UIBakery applications.
 *
 * This function allows components to trigger named events that can be listened to by other parts of the application.
 * It's commonly used for cross-component communication or to trigger workflows.
 *
 * @template P - The type of parameters to be passed with the event
 * @param {P} [param] - Optional parameters to include with the triggered event
 * @returns {void} This function doesn't return a value
 *
 * @example
 * // Trigger a simple event without parameters
 * triggerEvent();
 *
 * // Trigger an event with parameters
 * triggerEvent({ action: 'itemSelected', itemId: 123 });
 *
 * // Trigger an event with typed parameters
 * triggerEvent<{userId: number, action: string}>({ userId: 456, action: 'profile-viewed' });
 */
export declare function triggerEvent<P = any>(param?: P): void;
export interface ActionSettings {
    databaseName: string;
    query: string;
}
export type ActionConfig = {
    name: string;
    type: 'SQL';
    config: ActionSettings;
};
export type ActionFactory = () => ActionConfig;
export declare function action(name: string, type: 'SQL', config: ActionSettings): ActionConfig;
//# sourceMappingURL=index.d.ts.map